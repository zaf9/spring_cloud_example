{
    "positiveMatches": {
        "AuditAutoConfiguration#auditListener": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.listener.AbstractAuditListener; SearchStrategy: all) did not find any beans"
            }
        ],
        "AuditAutoConfiguration.AuditEventRepositoryConfiguration": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#autoConfigurationReportEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport; SearchStrategy: all) found bean 'autoConfigurationReport'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint; SearchStrategy: current) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#beansEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.BeansEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#configurationPropertiesReportEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#dumpEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.DumpEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#environmentEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.EnvironmentEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#healthEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.HealthEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#infoEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.InfoEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#loggersEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.LoggersEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#metricsEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.MetricsEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#shutdownEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.ShutdownEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration#traceEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.TraceEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointAutoConfiguration.RequestMappingEndpointConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.handler.AbstractHandlerMethodMapping'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "EndpointAutoConfiguration.RequestMappingEndpointConfiguration#requestMappingEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.RequestMappingEndpoint; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointMBeanExportAutoConfiguration": [
            {
                "condition": "EndpointMBeanExportAutoConfiguration.JmxEnabledCondition",
                "message": "JMX Enabled found properties spring.jmx.enabled, endpoints.jmx.enabled"
            }
        ],
        "EndpointMBeanExportAutoConfiguration#auditEventsEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'"
            },
            {
                "condition": "OnEnabledEndpointCondition",
                "message": "@ConditionalOnEnabledEndpoint All endpoints are enabled by default"
            }
        ],
        "EndpointWebMvcAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            }
        ],
        "EndpointWebMvcAutoConfiguration.ApplicationContextFilterConfiguration": [
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (management.add-application-context-header=true) matched"
            }
        ],
        "EndpointWebMvcAutoConfiguration.EndpointWebMvcConfiguration": [
            {
                "condition": "EndpointWebMvcAutoConfiguration.OnManagementMvcCondition",
                "message": "Management Server MVC port is same"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#auditEventMvcEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'"
            },
            {
                "condition": "OnEnabledEndpointCondition",
                "message": "@ConditionalOnEnabledEndpoint All endpoints are enabled by default"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#endpointHandlerMapping": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping; SearchStrategy: all) did not find any beans"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#environmentMvcEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.endpoint.EnvironmentEndpoint; SearchStrategy: all) found bean 'environmentEndpoint'"
            },
            {
                "condition": "OnEnabledEndpointCondition",
                "message": "@ConditionalOnEnabledEndpoint All endpoints are enabled by default"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#healthMvcEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.endpoint.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint; SearchStrategy: all) did not find any beans"
            },
            {
                "condition": "OnEnabledEndpointCondition",
                "message": "@ConditionalOnEnabledEndpoint All endpoints are enabled by default"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#heapdumpMvcEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint; SearchStrategy: all) did not find any beans"
            },
            {
                "condition": "OnEnabledEndpointCondition",
                "message": "@ConditionalOnEnabledEndpoint All endpoints are enabled by default"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#loggersMvcEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.endpoint.LoggersEndpoint; SearchStrategy: all) found bean 'loggersEndpoint'"
            },
            {
                "condition": "OnEnabledEndpointCondition",
                "message": "@ConditionalOnEnabledEndpoint All endpoints are enabled by default"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#metricsMvcEndpoint": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.endpoint.MetricsEndpoint; SearchStrategy: all) found bean 'metricsEndpoint'"
            },
            {
                "condition": "OnEnabledEndpointCondition",
                "message": "@ConditionalOnEnabledEndpoint All endpoints are enabled by default"
            }
        ],
        "EndpointWebMvcManagementContextConfiguration#mvcEndpoints": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints; SearchStrategy: all) did not find any beans"
            }
        ],
        "HealthIndicatorAutoConfiguration#healthAggregator": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) did not find any beans"
            }
        ],
        "HealthIndicatorAutoConfiguration.DiskSpaceHealthIndicatorConfiguration": [
            {
                "condition": "OnEnabledHealthIndicatorCondition",
                "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
            }
        ],
        "HealthIndicatorAutoConfiguration.DiskSpaceHealthIndicatorConfiguration#diskSpaceHealthIndicator": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans"
            }
        ],
        "InfoContributorAutoConfiguration#envInfoContributor": [
            {
                "condition": "OnEnabledInfoContributorCondition",
                "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
            }
        ],
        "ManagementServerPropertiesAutoConfiguration#managementServerProperties": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.ManagementServerProperties; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricExportAutoConfiguration": [
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.metrics.export.enabled) matched"
            }
        ],
        "MetricExportAutoConfiguration#metricWritersMetricExporter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (names: metricWritersMetricExporter; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricExportAutoConfiguration.MetricExportPropertiesConfiguration#metricExportProperties": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.export.MetricExportProperties; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricFilterAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'javax.servlet.ServletRegistration', 'org.springframework.web.filter.OncePerRequestFilter', 'org.springframework.web.servlet.HandlerMapping'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (endpoints.metrics.filter.enabled) matched"
            },
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.metrics.CounterService,org.springframework.boot.actuate.metrics.GaugeService; SearchStrategy: all) found beans 'counterService', 'gaugeService'"
            }
        ],
        "MetricRepositoryAutoConfiguration.FastMetricServicesConfiguration": [
            {
                "condition": "OnJavaCondition",
                "message": "@ConditionalOnJava (1.8 or newer) found 1.8"
            },
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.GaugeService; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricRepositoryAutoConfiguration.FastMetricServicesConfiguration#actuatorMetricReader": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.buffer.BufferMetricReader; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricRepositoryAutoConfiguration.FastMetricServicesConfiguration#counterBuffers": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.buffer.CounterBuffers; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricRepositoryAutoConfiguration.FastMetricServicesConfiguration#counterService": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.CounterService; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricRepositoryAutoConfiguration.FastMetricServicesConfiguration#gaugeBuffers": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.buffer.GaugeBuffers; SearchStrategy: all) did not find any beans"
            }
        ],
        "MetricRepositoryAutoConfiguration.FastMetricServicesConfiguration#gaugeService": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.GaugeService; SearchStrategy: all) did not find any beans"
            }
        ],
        "PublicMetricsAutoConfiguration.TomcatMetricsConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.apache.catalina.startup.Tomcat'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            }
        ],
        "PublicMetricsAutoConfiguration.TomcatMetricsConfiguration#tomcatPublicMetrics": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.TomcatPublicMetrics; SearchStrategy: all) did not find any beans"
            }
        ],
        "TraceRepositoryAutoConfiguration#traceRepository": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.TraceRepository; SearchStrategy: all) did not find any beans"
            }
        ],
        "TraceWebFilterAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'javax.servlet.ServletRegistration'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (endpoints.trace.filter.enabled) matched"
            }
        ],
        "TraceWebFilterAutoConfiguration#webRequestLoggingFilter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.WebRequestTraceFilter; SearchStrategy: all) did not find any beans"
            }
        ],
        "GenericCacheConfiguration": [
            {
                "condition": "CacheCondition",
                "message": "Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type"
            }
        ],
        "NoOpCacheConfiguration": [
            {
                "condition": "CacheCondition",
                "message": "Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type"
            }
        ],
        "RedisCacheConfiguration": [
            {
                "condition": "CacheCondition",
                "message": "Cache org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration automatic cache type"
            }
        ],
        "SimpleCacheConfiguration": [
            {
                "condition": "CacheCondition",
                "message": "Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type"
            }
        ],
        "PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans"
            }
        ],
        "JacksonAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans"
            }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'com.fasterxml.jackson.databind.ObjectMapper', 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans"
            }
        ],
        "JmxAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
            }
        ],
        "JmxAutoConfiguration#mbeanExporter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans"
            }
        ],
        "JmxAutoConfiguration#mbeanServer": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans"
            }
        ],
        "JmxAutoConfiguration#objectNamingStrategy": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans"
            }
        ],
        "DefaultValidatorConfiguration#defaultValidator": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: javax.validation.Validator,org.springframework.validation.Validator; SearchStrategy: all) did not find any beans"
            }
        ],
        "ValidationAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'javax.validation.executable.ExecutableValidator'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnResourceCondition",
                "message": "@ConditionalOnResource found location classpath:META-INF/services/javax.validation.spi.ValidationProvider"
            }
        ],
        "ValidationAutoConfiguration#methodValidationPostProcessor": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: javax.validation.Validator; SearchStrategy: all) found bean 'defaultValidator'; @ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: all) did not find any beans"
            }
        ],
        "DispatcherServletAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRegistration'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition",
                "message": "Default DispatcherServlet did not find dispatcher servlet beans"
            }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRegistration'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition",
                "message": "DispatcherServlet Registration did not find servlet registration bean"
            }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (names: dispatcherServlet; types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found beans 'dispatcherServlet', 'dispatcherServlet'"
            }
        ],
        "EmbeddedServletContainerAutoConfiguration": [
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            }
        ],
        "EmbeddedServletContainerAutoConfiguration.EmbeddedTomcat": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.apache.catalina.startup.Tomcat'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.context.embedded.EmbeddedServletContainerFactory; SearchStrategy: current) did not find any beans"
            }
        ],
        "ErrorMvcAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            }
        ],
        "ErrorMvcAutoConfiguration#basicErrorController": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.ErrorController; SearchStrategy: current) did not find any beans"
            }
        ],
        "ErrorMvcAutoConfiguration#errorAttributes": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.ErrorAttributes; SearchStrategy: current) did not find any beans"
            }
        ],
        "ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.DefaultErrorViewResolver; SearchStrategy: all) did not find any beans"
            }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration": [
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (server.error.whitelabel.enabled) matched"
            },
            {
                "condition": "ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition",
                "message": "ErrorTemplate Missing did not find error template view"
            }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans"
            }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans"
            }
        ],
        "HttpEncodingAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            },
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.http.encoding.enabled) matched"
            }
        ],
        "HttpEncodingAutoConfiguration#characterEncodingFilter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans"
            }
        ],
        "HttpMessageConvertersAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "HttpMessageConvertersAutoConfiguration#messageConverters": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.HttpMessageConverters; SearchStrategy: all) did not find any beans"
            }
        ],
        "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans"
            }
        ],
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.http.converters.preferred-json-mapper=jackson) matched"
            },
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
            }
        ],
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) did not find any beans"
            }
        ],
        "MultipartAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'javax.servlet.MultipartConfigElement'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.http.multipart.enabled) matched"
            }
        ],
        "MultipartAutoConfiguration#multipartConfigElement": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: javax.servlet.MultipartConfigElement; SearchStrategy: all) did not find any beans"
            }
        ],
        "MultipartAutoConfiguration#multipartResolver": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans"
            }
        ],
        "ServerPropertiesAutoConfiguration": [
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            }
        ],
        "ServerPropertiesAutoConfiguration#serverProperties": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.ServerProperties; SearchStrategy: current) did not find any beans"
            }
        ],
        "WebClientAutoConfiguration.RestTemplateConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "WebClientAutoConfiguration.RestTemplateConfiguration#restTemplateBuilder": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans"
            }
        ],
        "WebMvcAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            },
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans"
            }
        ],
        "WebMvcAutoConfiguration#hiddenHttpMethodFilter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.HiddenHttpMethodFilter; SearchStrategy: all) did not find any beans"
            }
        ],
        "WebMvcAutoConfiguration#httpPutFormContentFilter": [
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.mvc.formcontent.putfilter.enabled) matched"
            },
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.HttpPutFormContentFilter; SearchStrategy: all) did not find any beans"
            }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans"
            }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans"
            }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver": [
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver; types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans"
            }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.FaviconConfiguration": [
            {
                "condition": "OnPropertyCondition",
                "message": "@ConditionalOnProperty (spring.mvc.favicon.enabled) matched"
            }
        ],
        "WebSocketAutoConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'javax.websocket.server.ServerContainer'; @ConditionalOnMissingClass did not find unwanted class"
            },
            {
                "condition": "OnWebApplicationCondition",
                "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
            }
        ],
        "WebSocketAutoConfiguration.TomcatWebSocketConfiguration": [
            {
                "condition": "OnClassCondition",
                "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci'; @ConditionalOnMissingClass did not find unwanted class"
            }
        ],
        "WebSocketAutoConfiguration.TomcatWebSocketConfiguration#websocketContainerCustomizer": [
            {
                "condition": "OnJavaCondition",
                "message": "@ConditionalOnJava (1.7 or newer) found 1.8"
            },
            {
                "condition": "OnBeanCondition",
                "message": "@ConditionalOnMissingBean (names: websocketContainerCustomizer; SearchStrategy: all) did not find any beans"
            }
        ]
    },
    "negativeMatches": {
        "AuditAutoConfiguration#authenticationAuditListener": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.event.AbstractAuthenticationEvent'"
                }
            ],
            "matched": [
            ]
        },
        "AuditAutoConfiguration#authorizationAuditListener": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.security.access.event.AbstractAuthorizationEvent'"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration.CaffeineCacheStatisticsProviderConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.github.benmanes.caffeine.cache.Caffeine', 'org.springframework.cache.caffeine.CaffeineCacheManager'"
                },
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration.ConcurrentMapCacheStatisticsConfiguration": {
            "notMatched": [
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass found required class 'org.springframework.cache.concurrent.ConcurrentMapCache'; @ConditionalOnMissingClass did not find unwanted class"
                }
            ]
        },
        "CacheStatisticsAutoConfiguration.EhCacheCacheStatisticsProviderConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.cache.ehcache.EhCacheCache', 'net.sf.ehcache.Ehcache', 'net.sf.ehcache.statistics.StatisticsGateway'"
                },
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration.GuavaCacheStatisticsConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.google.common.cache.Cache', 'org.springframework.cache.guava.GuavaCache'"
                },
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration.HazelcastCacheStatisticsConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.core.IMap', 'com.hazelcast.spring.cache.HazelcastCache'"
                },
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration.InfinispanCacheStatisticsProviderConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.infinispan.spring.provider.SpringCache'"
                },
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration.JCacheCacheStatisticsProviderConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'javax.cache.Caching', 'org.springframework.cache.jcache.JCacheCache'"
                },
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
            ]
        },
        "CacheStatisticsAutoConfiguration.NoOpCacheStatisticsConfiguration": {
            "notMatched": [
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.actuate.autoconfigure.CacheStatisticsAutoConfiguration did not match"
                }
            ],
            "matched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass found required class 'org.springframework.cache.support.NoOpCacheManager'; @ConditionalOnMissingClass did not find unwanted class"
                }
            ]
        },
        "CrshAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.crsh.plugin.PluginLifeCycle'"
                }
            ],
            "matched": [
            ]
        },
        "ElasticsearchHealthIndicatorConfiguration.ElasticsearchClientHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.elasticsearch.client.Client; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "ElasticsearchHealthIndicatorConfiguration.ElasticsearchJestHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: io.searchbox.client.JestClient; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "EndpointAutoConfiguration.FlywayEndpointConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
                }
            ],
            "matched": [
            ]
        },
        "EndpointAutoConfiguration.LiquibaseEndpointConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase'"
                }
            ],
            "matched": [
            ]
        },
        "EndpointMBeanExportAutoConfiguration#mbeanServer": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) found bean 'mbeanServer'"
                }
            ],
            "matched": [
            ]
        },
        "EndpointWebMvcHypermediaManagementContextConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.hateoas.Link'"
                }
            ],
            "matched": [
            ]
        },
        "EndpointWebMvcManagementContextConfiguration#logfileMvcEndpoint": {
            "notMatched": [
                {
                    "condition": "EndpointWebMvcManagementContextConfiguration.LogFileCondition",
                    "message": "Log File did not find logging file"
                }
            ],
            "matched": [
            ]
        },
        "EndpointWebMvcManagementContextConfiguration#shutdownMvcEndpoint": {
            "notMatched": [
                {
                    "condition": "OnEnabledEndpointCondition",
                    "message": "@ConditionalOnEnabledEndpoint (shutdown) disabled"
                }
            ],
            "matched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.endpoint.ShutdownEndpoint; SearchStrategy: all) found bean 'shutdownEndpoint'"
                }
            ]
        },
        "HealthIndicatorAutoConfiguration#applicationHealthIndicator": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicator; SearchStrategy: all) found bean 'diskSpaceHealthIndicator'"
                }
            ],
            "matched": [
            ]
        },
        "HealthIndicatorAutoConfiguration.CassandraHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.data.cassandra.core.CassandraOperations', 'com.datastax.driver.core.Cluster'"
                }
            ],
            "matched": [
            ]
        },
        "HealthIndicatorAutoConfiguration.CouchbaseHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.data.couchbase.core.CouchbaseOperations', 'com.couchbase.client.java.Bucket'"
                }
            ],
            "matched": [
            ]
        },
        "HealthIndicatorAutoConfiguration.DataSourcesHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource'"
                }
            ],
            "matched": [
            ]
        },
        "HealthIndicatorAutoConfiguration.JmsHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: javax.jms.ConnectionFactory; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "HealthIndicatorAutoConfiguration.LdapHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations'"
                }
            ],
            "matched": [
            ]
        },
        "HealthIndicatorAutoConfiguration.MailHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.mail.javamail.JavaMailSenderImpl; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "HealthIndicatorAutoConfiguration.MongoHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.data.mongodb.core.MongoTemplate; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "HealthIndicatorAutoConfiguration.RabbitHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.amqp.rabbit.core.RabbitTemplate; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "HealthIndicatorAutoConfiguration.RedisHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.data.redis.connection.RedisConnectionFactory; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "HealthIndicatorAutoConfiguration.SolrHealthIndicatorConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.apache.solr.client.solrj.SolrClient; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledHealthIndicatorCondition",
                    "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
                }
            ]
        },
        "InfoContributorAutoConfiguration#buildInfoContributor": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledInfoContributorCondition",
                    "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
                }
            ]
        },
        "InfoContributorAutoConfiguration#gitInfoContributor": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnEnabledInfoContributorCondition",
                    "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
                }
            ]
        },
        "JolokiaAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.jolokia.http.AgentServlet'"
                }
            ],
            "matched": [
            ]
        },
        "ManagementServerPropertiesAutoConfiguration#securityProperties": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity'"
                }
            ],
            "matched": [
            ]
        },
        "ManagementServerPropertiesAutoConfiguration#serverProperties": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.ServerProperties; SearchStrategy: all) found bean 'serverProperties'"
                }
            ],
            "matched": [
                {
                    "condition": "OnWebApplicationCondition",
                    "message": "@ConditionalOnWebApplication (required) found StandardServletEnvironment"
                }
            ]
        },
        "ManagementWebSecurityAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity'"
                }
            ],
            "matched": [
            ]
        },
        "MetricExportAutoConfiguration.StatsdConfiguration#statsdMetricWriter": {
            "notMatched": [
                {
                    "condition": "OnPropertyCondition",
                    "message": "@ConditionalOnProperty (spring.metrics.export.statsd.host) did not find property 'host'"
                }
            ],
            "matched": [
            ]
        },
        "MetricRepositoryAutoConfiguration.LegacyMetricRepositoryConfiguration": {
            "notMatched": [
                {
                    "condition": "OnJavaCondition",
                    "message": "@ConditionalOnJava (older than 1.8) found 1.8"
                }
            ],
            "matched": [
            ]
        },
        "MetricRepositoryAutoConfiguration.LegacyMetricServicesConfiguration": {
            "notMatched": [
                {
                    "condition": "OnJavaCondition",
                    "message": "@ConditionalOnJava (older than 1.8) found 1.8"
                }
            ],
            "matched": [
            ]
        },
        "MetricsChannelAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.messaging.MessageChannel'"
                }
            ],
            "matched": [
            ]
        },
        "MetricsDropwizardAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.codahale.metrics.MetricRegistry'"
                }
            ],
            "matched": [
            ]
        },
        "PublicMetricsAutoConfiguration#richGaugePublicMetrics": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.metrics.rich.RichGaugeReader; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
            ]
        },
        "PublicMetricsAutoConfiguration.CacheStatisticsConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'; @ConditionalOnMissingClass did not find unwanted class"
                }
            ]
        },
        "PublicMetricsAutoConfiguration.DataSourceMetricsConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: javax.sql.DataSource; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass found required class 'javax.sql.DataSource'; @ConditionalOnMissingClass did not find unwanted class"
                }
            ]
        },
        "PublicMetricsAutoConfiguration.IntegrationMetricsConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegrationManagement'"
                }
            ],
            "matched": [
            ]
        },
        "CloudFoundryActuatorAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnCloudPlatformCondition",
                    "message": "@ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY"
                }
            ],
            "matched": [
                {
                    "condition": "OnPropertyCondition",
                    "message": "@ConditionalOnProperty (management.cloudfoundry.enabled) matched"
                }
            ]
        },
        "SpringApplicationAdminJmxAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnPropertyCondition",
                    "message": "@ConditionalOnProperty (spring.application.admin.enabled=true) did not find property 'enabled'"
                }
            ],
            "matched": [
            ]
        },
        "RabbitAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.amqp.rabbit.core.RabbitTemplate', 'com.rabbitmq.client.Channel'"
                }
            ],
            "matched": [
            ]
        },
        "AopAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice'"
                }
            ],
            "matched": [
            ]
        },
        "BatchAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.batch.core.launch.JobLauncher', 'org.springframework.jdbc.core.JdbcOperations'"
                }
            ],
            "matched": [
            ]
        },
        "CacheAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'; @ConditionalOnMissingClass did not find unwanted class"
                }
            ]
        },
        "CacheAutoConfiguration.CacheManagerJpaDependencyConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'"
                },
                {
                    "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
                    "message": "Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match"
                }
            ],
            "matched": [
            ]
        },
        "CaffeineCacheConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.github.benmanes.caffeine.cache.Caffeine', 'org.springframework.cache.caffeine.CaffeineCacheManager'"
                }
            ],
            "matched": [
            ]
        },
        "CouchbaseCacheConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'com.couchbase.client.spring.cache.CouchbaseCacheManager'"
                }
            ],
            "matched": [
            ]
        },
        "EhCacheCacheConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'net.sf.ehcache.Cache', 'org.springframework.cache.ehcache.EhCacheCacheManager'"
                }
            ],
            "matched": [
            ]
        },
        "GuavaCacheConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.google.common.cache.CacheBuilder', 'org.springframework.cache.guava.GuavaCacheManager'"
                }
            ],
            "matched": [
            ]
        },
        "HazelcastCacheConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'com.hazelcast.spring.cache.HazelcastCacheManager'"
                }
            ],
            "matched": [
            ]
        },
        "InfinispanCacheConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.infinispan.spring.provider.SpringEmbeddedCacheManager'"
                }
            ],
            "matched": [
            ]
        },
        "JCacheCacheConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'javax.cache.Caching', 'org.springframework.cache.jcache.JCacheCacheManager'"
                }
            ],
            "matched": [
            ]
        },
        "CassandraAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster'"
                }
            ],
            "matched": [
            ]
        },
        "CloudAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.cloud.config.java.CloudScanConfiguration'"
                }
            ],
            "matched": [
            ]
        },
        "MessageSourceAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "MessageSourceAutoConfiguration.ResourceBundleCondition",
                    "message": "ResourceBundle did not find bundle with basename messages"
                }
            ],
            "matched": [
            ]
        },
        "CouchbaseAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.couchbase.client.java.CouchbaseBucket', 'com.couchbase.client.java.Cluster'"
                }
            ],
            "matched": [
            ]
        },
        "PersistenceExceptionTranslationAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor'"
                }
            ],
            "matched": [
            ]
        },
        "CassandraDataAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.datastax.driver.core.Cluster', 'org.springframework.data.cassandra.core.CassandraAdminOperations'"
                }
            ],
            "matched": [
            ]
        },
        "CassandraRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.datastax.driver.core.Session', 'org.springframework.data.cassandra.repository.CassandraRepository'"
                }
            ],
            "matched": [
            ]
        },
        "CouchbaseDataAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'org.springframework.data.couchbase.repository.CouchbaseRepository'"
                }
            ],
            "matched": [
            ]
        },
        "CouchbaseRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'org.springframework.data.couchbase.repository.CouchbaseRepository'"
                }
            ],
            "matched": [
            ]
        },
        "ElasticsearchAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.elasticsearch.client.Client', 'org.springframework.data.elasticsearch.client.TransportClientFactoryBean', 'org.springframework.data.elasticsearch.client.NodeClientFactoryBean'"
                }
            ],
            "matched": [
            ]
        },
        "ElasticsearchDataAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.elasticsearch.client.Client', 'org.springframework.data.elasticsearch.core.ElasticsearchTemplate'"
                }
            ],
            "matched": [
            ]
        },
        "ElasticsearchRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.elasticsearch.client.Client', 'org.springframework.data.elasticsearch.repository.ElasticsearchRepository'"
                }
            ],
            "matched": [
            ]
        },
        "JpaRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository'"
                }
            ],
            "matched": [
            ]
        },
        "LdapDataAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'"
                }
            ],
            "matched": [
            ]
        },
        "LdapRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'"
                }
            ],
            "matched": [
            ]
        },
        "MongoDataAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.mongodb.Mongo', 'org.springframework.data.mongodb.core.MongoTemplate'"
                }
            ],
            "matched": [
            ]
        },
        "MongoRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.mongodb.Mongo', 'org.springframework.data.mongodb.repository.MongoRepository'"
                }
            ],
            "matched": [
            ]
        },
        "Neo4jDataAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.neo4j.ogm.session.SessionFactory', 'org.springframework.transaction.PlatformTransactionManager'"
                }
            ],
            "matched": [
            ]
        },
        "Neo4jRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.neo4j.ogm.session.Neo4jSession', 'org.springframework.data.neo4j.repository.GraphRepository'"
                }
            ],
            "matched": [
            ]
        },
        "RedisAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.data.redis.connection.jedis.JedisConnection', 'org.springframework.data.redis.core.RedisOperations', 'redis.clients.jedis.Jedis'"
                }
            ],
            "matched": [
            ]
        },
        "RedisRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'redis.clients.jedis.Jedis', 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories'"
                }
            ],
            "matched": [
            ]
        },
        "RepositoryRestMvcAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration'"
                }
            ],
            "matched": [
            ]
        },
        "SolrRepositoriesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.apache.solr.client.solrj.SolrClient', 'org.springframework.data.solr.repository.SolrRepository'"
                }
            ],
            "matched": [
            ]
        },
        "SpringDataWebAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.data.web.PageableHandlerMethodArgumentResolver'"
                }
            ],
            "matched": [
            ]
        },
        "JestAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'io.searchbox.client.JestClient'"
                }
            ],
            "matched": [
            ]
        },
        "FlywayAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
                }
            ],
            "matched": [
            ]
        },
        "FreeMarkerAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'freemarker.template.Configuration', 'org.springframework.ui.freemarker.FreeMarkerConfigurationFactory'"
                }
            ],
            "matched": [
            ]
        },
        "GroovyTemplateAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine'"
                }
            ],
            "matched": [
            ]
        },
        "GsonAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
                }
            ],
            "matched": [
            ]
        },
        "H2ConsoleAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet'"
                }
            ],
            "matched": [
            ]
        },
        "HypermediaAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.hateoas.Resource', 'org.springframework.plugin.core.Plugin'"
                }
            ],
            "matched": [
            ]
        },
        "HazelcastAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
                }
            ],
            "matched": [
            ]
        },
        "HazelcastJpaDependencyAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'"
                }
            ],
            "matched": [
            ]
        },
        "ProjectInfoAutoConfiguration#buildProperties": {
            "notMatched": [
                {
                    "condition": "OnResourceCondition",
                    "message": "@ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}'"
                }
            ],
            "matched": [
            ]
        },
        "ProjectInfoAutoConfiguration#gitProperties": {
            "notMatched": [
                {
                    "condition": "ProjectInfoAutoConfiguration.GitResourceAvailableCondition",
                    "message": "GitResource did not find git info at classpath:git.properties"
                }
            ],
            "matched": [
            ]
        },
        "IntegrationAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration'"
                }
            ],
            "matched": [
            ]
        },
        "JacksonAutoConfiguration.JodaDateTimeJacksonConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.joda.time.DateTime', 'com.fasterxml.jackson.datatype.joda.ser.DateTimeSerializer', 'com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat'"
                }
            ],
            "matched": [
            ]
        },
        "JacksonAutoConfiguration.ParameterNamesModuleConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule'"
                }
            ],
            "matched": [
            ]
        },
        "DataSourceAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
                }
            ],
            "matched": [
            ]
        },
        "DataSourceTransactionManagerAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.transaction.PlatformTransactionManager'"
                }
            ],
            "matched": [
            ]
        },
        "JdbcTemplateAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
                }
            ],
            "matched": [
            ]
        },
        "JndiDataSourceAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
                }
            ],
            "matched": [
            ]
        },
        "XADataSourceAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'javax.transaction.TransactionManager', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
                }
            ],
            "matched": [
            ]
        },
        "JerseyAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider'"
                }
            ],
            "matched": [
            ]
        },
        "JmsAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'javax.jms.Message', 'org.springframework.jms.core.JmsTemplate'"
                }
            ],
            "matched": [
            ]
        },
        "JndiConnectionFactoryAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate'"
                }
            ],
            "matched": [
            ]
        },
        "ActiveMQAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory'"
                }
            ],
            "matched": [
            ]
        },
        "ArtemisAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory'"
                }
            ],
            "matched": [
            ]
        },
        "JooqAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.jooq.DSLContext'"
                }
            ],
            "matched": [
            ]
        },
        "KafkaAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate'"
                }
            ],
            "matched": [
            ]
        },
        "LdapAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource'"
                }
            ],
            "matched": [
            ]
        },
        "EmbeddedLdapAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer'"
                }
            ],
            "matched": [
            ]
        },
        "LiquibaseAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase'"
                }
            ],
            "matched": [
            ]
        },
        "MailSenderAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'javax.mail.internet.MimeMessage'"
                }
            ],
            "matched": [
            ]
        },
        "MailSenderValidatorAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnPropertyCondition",
                    "message": "@ConditionalOnProperty (spring.mail.test-connection) did not find property 'test-connection'"
                }
            ],
            "matched": [
            ]
        },
        "DeviceDelegatingViewResolverAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver'"
                }
            ],
            "matched": [
            ]
        },
        "DeviceResolverAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.mobile.device.DeviceResolverHandlerInterceptor', 'org.springframework.mobile.device.DeviceHandlerMethodArgumentResolver'"
                }
            ],
            "matched": [
            ]
        },
        "SitePreferenceAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.mobile.device.site.SitePreferenceHandlerInterceptor', 'org.springframework.mobile.device.site.SitePreferenceHandlerMethodArgumentResolver'"
                }
            ],
            "matched": [
            ]
        },
        "MongoAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.mongodb.MongoClient'"
                }
            ],
            "matched": [
            ]
        },
        "EmbeddedMongoAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'com.mongodb.Mongo', 'de.flapdoodle.embed.mongo.MongodStarter'"
                }
            ],
            "matched": [
            ]
        },
        "MustacheAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache'"
                }
            ],
            "matched": [
            ]
        },
        "HibernateJpaAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean', 'javax.persistence.EntityManager'"
                }
            ],
            "matched": [
            ]
        },
        "ReactorAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'reactor.spring.context.config.EnableReactor', 'reactor.Environment'"
                }
            ],
            "matched": [
            ]
        },
        "FallbackWebSecurityAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity'"
                }
            ],
            "matched": [
            ]
        },
        "SecurityAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.security.authentication.AuthenticationManager', 'org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter'"
                }
            ],
            "matched": [
            ]
        },
        "SecurityFilterAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer', 'org.springframework.security.config.http.SessionCreationPolicy'"
                }
            ],
            "matched": [
            ]
        },
        "OAuth2AutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.security.oauth2.common.OAuth2AccessToken'"
                }
            ],
            "matched": [
            ]
        },
        "SendGridAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.sendgrid.SendGrid'"
                }
            ],
            "matched": [
            ]
        },
        "SessionAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.session.Session'"
                }
            ],
            "matched": [
            ]
        },
        "FacebookAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.social.config.annotation.SocialConfigurerAdapter', 'org.springframework.social.facebook.connect.FacebookConnectionFactory'"
                }
            ],
            "matched": [
            ]
        },
        "LinkedInAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.social.config.annotation.SocialConfigurerAdapter', 'org.springframework.social.linkedin.connect.LinkedInConnectionFactory'"
                }
            ],
            "matched": [
            ]
        },
        "SocialWebAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.social.connect.web.ConnectController', 'org.springframework.social.config.annotation.SocialConfigurerAdapter'"
                }
            ],
            "matched": [
            ]
        },
        "TwitterAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.springframework.social.config.annotation.SocialConfigurerAdapter', 'org.springframework.social.twitter.connect.TwitterConnectionFactory'"
                }
            ],
            "matched": [
            ]
        },
        "SolrAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.apache.solr.client.solrj.impl.HttpSolrClient', 'org.apache.solr.client.solrj.impl.CloudSolrClient'"
                }
            ],
            "matched": [
            ]
        },
        "ThymeleafAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.thymeleaf.spring4.SpringTemplateEngine'"
                }
            ],
            "matched": [
            ]
        },
        "TransactionAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.transaction.PlatformTransactionManager'"
                }
            ],
            "matched": [
            ]
        },
        "JtaAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'javax.transaction.Transaction'"
                }
            ],
            "matched": [
            ]
        },
        "Jsr303ValidatorAdapterConfiguration#jsr303ValidatorAdapter": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnMissingBean (types: org.springframework.validation.Validator; SearchStrategy: all) found bean 'defaultValidator'"
                }
            ],
            "matched": [
            ]
        },
        "DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans"
                }
            ],
            "matched": [
            ]
        },
        "EmbeddedServletContainerAutoConfiguration.EmbeddedJetty": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext'"
                }
            ],
            "matched": [
            ]
        },
        "EmbeddedServletContainerAutoConfiguration.EmbeddedUndertow": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
                }
            ],
            "matched": [
            ]
        },
        "GsonHttpMessageConvertersConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
                }
            ],
            "matched": [
            ]
        },
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper'"
                }
            ],
            "matched": [
            ]
        },
        "WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration": {
            "notMatched": [
                {
                    "condition": "OnEnabledResourceChainCondition",
                    "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator"
                }
            ],
            "matched": [
            ]
        },
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver": {
            "notMatched": [
                {
                    "condition": "OnBeanCondition",
                    "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found bean 'beanNameViewResolver'"
                }
            ],
            "matched": [
            ]
        },
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#dateFormatter": {
            "notMatched": [
                {
                    "condition": "OnPropertyCondition",
                    "message": "@ConditionalOnProperty (spring.mvc.date-format) did not find property 'date-format'"
                }
            ],
            "matched": [
            ]
        },
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#localeResolver": {
            "notMatched": [
                {
                    "condition": "OnPropertyCondition",
                    "message": "@ConditionalOnProperty (spring.mvc.locale) did not find property 'locale'"
                }
            ],
            "matched": [
            ]
        },
        "WebServicesAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet'"
                }
            ],
            "matched": [
            ]
        },
        "WebSocketAutoConfiguration.JettyWebSocketConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer'"
                }
            ],
            "matched": [
            ]
        },
        "WebSocketAutoConfiguration.UndertowWebSocketConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap'"
                }
            ],
            "matched": [
            ]
        },
        "WebSocketMessagingAutoConfiguration": {
            "notMatched": [
                {
                    "condition": "OnClassCondition",
                    "message": "@ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer'"
                }
            ],
            "matched": [
            ]
        }
    }
}
